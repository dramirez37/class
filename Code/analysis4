""""Analysis Portion of Data Explorer: Wage Differencees Accross College Majors"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
import seaborn as sns

data = pd.read_csv("/workspaces/class/Data/usa_00001.csv.gz")
data.columns = data.columns.str.lower()

degfield_to_major = {
00:	"N/A",
11:	"Agriculture",
13:	"Environment and Natural Resources",
14:	"Architecture",
15:	"Area, Ethnic, and Civilization Studies",
19:	"Communications",
20:	"Communication Technologies",
21:	"Computer and Information Sciences",
22:	"Cosmetology Services and Culinary Arts",
23:	"Education Administration and Teaching",
24:	"Engineering",
25:	"Engineering Technologies",
26:	"Linguistics and Foreign Languages",
29:	"Family and Consumer Sciences",
32:	"Law",
33:	"English Language, Literature, and Composition",
34:	"Liberal Arts and Humanities",
35:	"Library Science",
36:	"Biology and Life Sciences",
37:	"Mathematics and Statistics",
38:	"Military Technologies",
40:	"Interdisciplinary and Multi-Disciplinary Studies (General)",
41:	"Physical Fitness, Parks, Recreation, and Leisure",
48:	"Philosophy and Religious Studies",
49:	"Theology and Religious Vocations",
50:	"Physical Sciences",
51:	"Nuclear, Industrial Radiology, and Biological Technologies",
52:	"Psychology",
53:	"Criminal Justice and Fire Protection",
54:	"Public Affairs, Policy, and Social Work",
55:	"Social Sciences",
56:	"Construction Services",
57:	"Electrical and Mechanic Repairs and Technologies",
58:	"Precision Production and Industrial Arts",
59:	"Transportation Sciences and Technologies",
60:	"Fine Arts",
61:	"Medical and Health Sciences and Services",
62:	"Business",
64:	"History"
}

data['major_name'] = data['degfield'].map(degfield_to_major)

data_filtered = data.query("year == 2019 & school == 1 & 21 <= age <= 30 & educ == 10 & 0 < incwage < 999998").copy()
data_filtered['lannual'] = np.log(data_filtered['incwage'])
data_filtered['female'] = (data_filtered['sex'] == 2)

degfield_counts = data_filtered['major_name'].value_counts()
data_filtered = data_filtered[data_filtered['major_name'].isin(degfield_counts.index[degfield_counts >= 300])]

data_filtered['detailed_major_name'] = data_filtered.apply(lambda x: 'Economics' if x['degfieldd'] == 5501 else ('Other Social Sciences' if x['major_name'] == 'Social Sciences' else x['major_name']), axis=1)

def calculate_weighted_avg_lannual(df):
    return np.average(df['lannual'], weights=df['perwt'])

avg_log_earnings_detailed = data_filtered.groupby('detailed_major_name').apply(calculate_weighted_avg_lannual).reset_index(name='Avg_Log_Annual_Earnings')
avg_log_earnings_detailed.sort_values(by='Avg_Log_Annual_Earnings', ascending=False, inplace=True)

avg_log_earnings_detailed.to_csv("/workspaces/class/Graphs/avg_log_earnings_detailed_by_major1.csv", index=False)

avg_lannual_weighted = data_filtered.groupby('major_name').apply(
    lambda x: np.average(x['lannual'], weights=x['perwt'])
).reset_index(name='Avg_Log_Annual_Earnings')
avg_lannual_weighted.sort_values(by='Avg_Log_Annual_Earnings', ascending=False, inplace=True)
avg_lannual_weighted.to_csv("/workspaces/class/Graphs/avg_log_earnings_by_major_weighted.csv", index=False)

def calculate_earnings(df):
    male_earnings = np.average(df[df['sex'] == 1]['lannual'], 
                               weights=df[df['sex'] == 1]['perwt']) if not df[df['sex'] == 1].empty else np.nan
    female_earnings = np.average(df[df['sex'] == 2]['lannual'], 
                                 weights=df[df['sex'] == 2]['perwt']) if not df[df['sex'] == 2].empty else np.nan
    gender_gap = male_earnings - female_earnings
    return pd.Series({'male_earnings': male_earnings, 'female_earnings': female_earnings, 'gender_gap': gender_gap})

data_gender = data_filtered.groupby('major_name').apply(calculate_earnings).reset_index()

def weighted_female_percentage(df):
    total_weight = df['perwt'].sum()
    female_weight = df[df['female'] == 1]['perwt'].sum()
    percent_female = (female_weight / total_weight) * 100
    return percent_female

female_perc_weighted = data_filtered.groupby('major_name').apply(weighted_female_percentage).reset_index(name='percent_female')

scatter_data = pd.merge(data_gender, female_perc_weighted, on='major_name')

plt.figure(figsize=(10, 6))
ax = sns.scatterplot(data=scatter_data, x='percent_female', y='male_earnings')
ax.xaxis.set_major_formatter(mtick.PercentFormatter())
plt.title('Average Log Male Annual Earnings and Female Percentage of Workers in Industry')
plt.xlabel('Percent Female Workers in Industry')
plt.ylabel('Average Log Annual Earnings of Male')
plt.grid(True)
plt.xlim(0, 100)
plt.ylim(10.2, 11)
plt.xticks(np.arange(0, 101, 20))
plt.yticks(np.arange(10.2, 11.1, 0.2))
plt.tight_layout()
plt.savefig("/workspaces/class/Graphs/gender_earnings_relationship_weighted1.pdf")
